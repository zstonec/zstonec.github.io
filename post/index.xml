<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 小石笔记</title><link>https://zstonec.github.io/post/</link><description>Recent content in Posts on 小石笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 02 Sep 2022 17:55:27 +0800</lastBuildDate><atom:link href="https://zstonec.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Druid Kafka Index Service支持多topic改造</title><link>https://zstonec.github.io/post/multi-kafka-index/</link><pubDate>Fri, 02 Sep 2022 17:55:27 +0800</pubDate><guid>https://zstonec.github.io/post/multi-kafka-index/</guid><description>&lt;p>Druid实时摄取支持Kafka Index Service和Tranquility两种方式。对比Tranquility的方式，KIS具有Exactly Once语义，部署维护简单，schema实时生效等优点。然而，当前社区KIS仅支持从一个topic摄取数据，写入一个dataSource。而我们的场景是请求、曝光、点击分别有一个topic，每个topic的日志格式一致（每个topic都各自有下游的统计等其他任务）。然后通过Tranquility摄取到同一个dataSource中。如果改为KIS摄取，按照社区的建议，需要在上游将请求、曝光、点击写入一个新的topic中。这带来两个问题：1.我们的数据量非常大，如果再建一个新的topic，几乎等于kafka的流量翻倍，成本和运维压力巨大；2.请求、曝光的数据量较大（重要性相对较低），而点击等日志量较小（重要性相对较高）。如果都放在一个topic中，不同日志之间可能会相互影响。因此，我们需要改造KIS，支持从多个topic摄取，写入到一个dataSource中。&lt;/p></description></item><item><title>Tranquility线程溢出问题排查</title><link>https://zstonec.github.io/post/tranquility-thread/</link><pubDate>Thu, 01 Jul 2021 19:45:27 +0800</pubDate><guid>https://zstonec.github.io/post/tranquility-thread/</guid><description>&lt;p>本文记录一次生产环境Tranquility线程溢出的问题。&lt;/p></description></item><item><title>Kafka Consumer</title><link>https://zstonec.github.io/post/kafka-consumer/</link><pubDate>Tue, 25 May 2021 17:31:46 +0800</pubDate><guid>https://zstonec.github.io/post/kafka-consumer/</guid><description>&lt;p>本文结合源码分析Kafka Consumer的逻辑，涉及再均衡等过程分析。&lt;/p></description></item><item><title>Java Bit</title><link>https://zstonec.github.io/post/java-bit/</link><pubDate>Tue, 25 May 2021 17:23:43 +0800</pubDate><guid>https://zstonec.github.io/post/java-bit/</guid><description>&lt;p>本文主要介绍JAVA中的字节相关知识。&lt;/p></description></item><item><title>Druid Segment</title><link>https://zstonec.github.io/post/druid-segment/</link><pubDate>Tue, 25 May 2021 15:58:34 +0800</pubDate><guid>https://zstonec.github.io/post/druid-segment/</guid><description>&lt;p>本文从druid存储文件入手，由下而上，分析segment的存储结构，力求详尽。&lt;/p></description></item><item><title>Markdown语法手册</title><link>https://zstonec.github.io/post/markdown-syntax/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://zstonec.github.io/post/markdown-syntax/</guid><description>&lt;p>本文提供了一个可以在Hugo内容文件中使用的基本Markdown语法示例，还展示了基本HTML元素在Hugo主题中是否使用CSS装饰。&lt;/p></description></item><item><title>富文本内容测试</title><link>https://zstonec.github.io/post/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://zstonec.github.io/post/rich-content/</guid><description>&lt;p>Hugo 雨果附带几个[内置的短码](&lt;a href="https://gohugo.io/content-management/shortcodes/">https://gohugo.io/content-management/shortcodes/&lt;/a> use-hugos-built-in-shortcodes)内容丰富,以及&lt;a href="https://gohugo.io/about/hugo-and-gdpr/">隐私配置&lt;/a>和一组简单的短码,使静态和no-JS版本的各种社会媒体嵌入。&lt;/p></description></item><item><title>占位符文本显示</title><link>https://zstonec.github.io/post/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://zstonec.github.io/post/placeholder-text/</guid><description>&lt;p>你对我的心有偏见。我向您保证，我们的生活将不会受到影响，我们的生活将会受到影响。你说你现在住在医院里，因为你的眼睛是透明的，你的眼睛是光明的，你的眼睛是光明的!&lt;/p></description></item><item><title>数据公式设置显示</title><link>https://zstonec.github.io/post/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://zstonec.github.io/post/math-typesetting/</guid><description>&lt;p>Hugo项目中的数学符号可以通过使用第三方JavaScript库来启用。&lt;/p></description></item><item><title>支持Emoji表情符号</title><link>https://zstonec.github.io/post/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://zstonec.github.io/post/emoji-support/</guid><description>&lt;p>在Hugo项目中可以通过多种方式启用Emoji。&lt;/p></description></item></channel></rss>